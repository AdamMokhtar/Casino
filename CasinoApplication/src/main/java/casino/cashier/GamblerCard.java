package casino.cashier;


import casino.idfactory.BetID;
import casino.idfactory.CardID;
import casino.idfactory.GamingMachineID;
import casino.idfactory.IDFactory;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

/**
 * @author adam
 */

public class GamblerCard implements IGamblerCard {

    private Set<BetID> betIDs;
    private CardID cardID;

    /**
     * constructor which initialise a new hash set to the local betIDs set
     * generate a new cardID to the local cardID
     *
     * @should initialiseCardIDAttributeWithReturnedCardIDObject
     */
    public GamblerCard()
    {
        this.betIDs = new HashSet<>();
        this.cardID = (CardID) IDFactory.generateID("CARDID");
    }

    /**
     * returns all generated betID's by this card
     *
     * @should returnAllBetIDsAddedToTheSetOfBetIDs
     * @should returnAnEmptySetWhenNoBetIDsWereAddedToTheSetOfBetIDs
     * @return a copied set of betID's generated by this card.
     */
    @Override
    public Set<BetID> returnBetIDs() {
        return betIDs;
    }

    /**
     * returns all generated betID's by this card, and clears all betID's from the card.
     *
     * @should returnAllBetIDsAddedToTheSetOfBetIDs
     * @should returnAnEmptySetWhenNoBetIDsWereAddedToTheSetOfBetIDs
     * @should removeAllBetIDsFromTheSetOfBetIDs
     * @return a copied set of betID's generated by this card.
     */
    @Override
    public Set<BetID> returnBetIDsAndClearCard() {
        Set<BetID> tempSet = new HashSet<>();
        tempSet.addAll(betIDs);
        this.betIDs.clear();
        return tempSet;
    }

    /**
     * The card generates a unique betID for every bet made by the gambler on the machine.
     * A list of all generated betID’s is also stored on the card. BetID’s also contain a timestamp.
     *
     * @should addTheNewGeneratedBetIDToTheSetOfBetIDs
     * @should returnTheNewGeneratedBetID
     * @return
     */
    @Override
    public BetID generateNewBetID() {
        BetID betID = (BetID) IDFactory.generateID("BETID");
        betIDs.add(betID);
        return betID;
    }

    /**
     * return number of betID's generated on this card.
     *
     * @should returnTheAmountOfBetIDsInTheSetOfBetIDs
     * @should returnZeroWhenNoBetIDsWereAddedToTheSetOfBetIDs
     * @return number of BetIDs in the set
     */
    @Override
    public int getNumberOfBetIDs() {

        return this.betIDs.size();
    }

    /**
     * @should returnTheCardIDThatIsAssignedToTheLocalVariableCardID
     * @return the local cardID variable
     */
    @Override
    public CardID getCardID() {
        return cardID;
    }

    // BELOW ARE GETTERS CREATED WITH INTELLIJ SO THEY DO NOT NEED TO BE TESTED
    public Set<BetID> getBetIDs() {
        return betIDs;
    }
}
